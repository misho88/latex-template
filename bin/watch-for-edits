#!/usr/bin/env python3

import argparse
from sys import stdout, stderr, exit
from pathlib import Path
from subprocess import run
from termcolor import colored

parser = argparse.ArgumentParser(
    description=f'watch a file and run a command in response to edits'
)
parser.add_argument('--file', '-f', required=True, type=Path,
    help='the file to watch')
parser.add_argument('--command', '-c', required=True,
    help='the command to run')
parser.add_argument('--quiet', '-q', default=False, action='store_true',
    help='no output if everything goes okay')
parser.add_argument('--quiet-on-error', '-e', default=False, action='store_true',
    help='no output even if there is an error (no effect without -q)')
args = parser.parse_args()

assert args.file.exists(), f"{args.file} does not exist"

try:
    while True:
        res = run([ 'inotifywait', '-e', 'modify', '-e', 'move_self', str(args.file) ])
        if res.returncode:
            print(res, "something went wrong, exiting", sep='\n', file=stderr)
            exit(1)
        res = run(args.command, shell=True, capture_output=args.quiet)
        if res.returncode and not args.quiet_on_error:
            if res.stdout:
                print(res.stdout.decode(), file=stdout)
            if res.stderr:
                print(res.stderr.decode(), file=stderr)
            print(colored(
                f"WARNING: {args.command} did not complete successfully",
                'red',
                attrs=['bold'],
            ), file=stderr)
except KeyboardInterrupt:
    pass
